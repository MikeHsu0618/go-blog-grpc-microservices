// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: blog.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Blog_User with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Blog_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_User with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Blog_UserMultiError, or nil
// if none found.
func (m *Blog_User) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Avatar

	if len(errors) > 0 {
		return Blog_UserMultiError(errors)
	}

	return nil
}

// Blog_UserMultiError is an error wrapping multiple validation errors returned
// by Blog_User.ValidateAll() if the designated constraints aren't met.
type Blog_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_UserMultiError) AllErrors() []error { return m }

// Blog_UserValidationError is the validation error returned by
// Blog_User.Validate if the designated constraints aren't met.
type Blog_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_UserValidationError) ErrorName() string { return "Blog_UserValidationError" }

// Error satisfies the builtin error interface
func (e Blog_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_UserValidationError{}

// Validate checks the field values on Blog_Post with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Blog_Post) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_Post with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Blog_PostMultiError, or nil
// if none found.
func (m *Blog_Post) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_Post) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 140 {
		err := Blog_PostValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 140 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 1 || l > 3000 {
		err := Blog_PostValidationError{
			field:  "Content",
			reason: "value length must be between 1 and 3000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	// no validation rules for CommentsCount

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Blog_PostValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Blog_PostValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Blog_PostValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Blog_PostValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Blog_PostValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Blog_PostValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Blog_PostValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Blog_PostValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Blog_PostValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Blog_PostMultiError(errors)
	}

	return nil
}

// Blog_PostMultiError is an error wrapping multiple validation errors returned
// by Blog_Post.ValidateAll() if the designated constraints aren't met.
type Blog_PostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_PostMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_PostMultiError) AllErrors() []error { return m }

// Blog_PostValidationError is the validation error returned by
// Blog_Post.Validate if the designated constraints aren't met.
type Blog_PostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_PostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_PostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_PostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_PostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_PostValidationError) ErrorName() string { return "Blog_PostValidationError" }

// Error satisfies the builtin error interface
func (e Blog_PostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_Post.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_PostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_PostValidationError{}

// Validate checks the field values on Blog_Comment with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Blog_Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_Comment with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Blog_CommentMultiError, or
// nil if none found.
func (m *Blog_Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetContent()); l < 1 || l > 140 {
		err := Blog_CommentValidationError{
			field:  "Content",
			reason: "value length must be between 1 and 140 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PostId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Blog_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Blog_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Blog_CommentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Blog_CommentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Blog_CommentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Blog_CommentValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Blog_CommentValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Blog_CommentValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Blog_CommentValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Blog_CommentValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Blog_CommentValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Blog_CommentValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Blog_CommentMultiError(errors)
	}

	return nil
}

// Blog_CommentMultiError is an error wrapping multiple validation errors
// returned by Blog_Comment.ValidateAll() if the designated constraints aren't met.
type Blog_CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_CommentMultiError) AllErrors() []error { return m }

// Blog_CommentValidationError is the validation error returned by
// Blog_Comment.Validate if the designated constraints aren't met.
type Blog_CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_CommentValidationError) ErrorName() string { return "Blog_CommentValidationError" }

// Error satisfies the builtin error interface
func (e Blog_CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_Comment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_CommentValidationError{}

// Validate checks the field values on Blog_SignUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_SignUpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_SignUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_SignUpRequestMultiError, or nil if none found.
func (m *Blog_SignUpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_SignUpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Password

	switch m.Request.(type) {

	case *Blog_SignUpRequest_Username:

		if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 30 {
			err := Blog_SignUpRequestValidationError{
				field:  "Username",
				reason: "value length must be between 1 and 30 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *Blog_SignUpRequest_Email:

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = Blog_SignUpRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return Blog_SignUpRequestMultiError(errors)
	}

	return nil
}

func (m *Blog_SignUpRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *Blog_SignUpRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// Blog_SignUpRequestMultiError is an error wrapping multiple validation errors
// returned by Blog_SignUpRequest.ValidateAll() if the designated constraints
// aren't met.
type Blog_SignUpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_SignUpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_SignUpRequestMultiError) AllErrors() []error { return m }

// Blog_SignUpRequestValidationError is the validation error returned by
// Blog_SignUpRequest.Validate if the designated constraints aren't met.
type Blog_SignUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_SignUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_SignUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_SignUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_SignUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_SignUpRequestValidationError) ErrorName() string {
	return "Blog_SignUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_SignUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_SignUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_SignUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_SignUpRequestValidationError{}

// Validate checks the field values on Blog_SignUpResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_SignUpResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_SignUpResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_SignUpResponseMultiError, or nil if none found.
func (m *Blog_SignUpResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_SignUpResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return Blog_SignUpResponseMultiError(errors)
	}

	return nil
}

// Blog_SignUpResponseMultiError is an error wrapping multiple validation
// errors returned by Blog_SignUpResponse.ValidateAll() if the designated
// constraints aren't met.
type Blog_SignUpResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_SignUpResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_SignUpResponseMultiError) AllErrors() []error { return m }

// Blog_SignUpResponseValidationError is the validation error returned by
// Blog_SignUpResponse.Validate if the designated constraints aren't met.
type Blog_SignUpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_SignUpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_SignUpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_SignUpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_SignUpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_SignUpResponseValidationError) ErrorName() string {
	return "Blog_SignUpResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_SignUpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_SignUpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_SignUpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_SignUpResponseValidationError{}

// Validate checks the field values on Blog_SignInRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_SignInRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_SignInRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_SignInRequestMultiError, or nil if none found.
func (m *Blog_SignInRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_SignInRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPassword()); l < 1 || l > 30 {
		err := Blog_SignInRequestValidationError{
			field:  "Password",
			reason: "value length must be between 1 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch m.Request.(type) {

	case *Blog_SignInRequest_Username:

		if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 30 {
			err := Blog_SignInRequestValidationError{
				field:  "Username",
				reason: "value length must be between 1 and 30 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *Blog_SignInRequest_Email:

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = Blog_SignInRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		err := Blog_SignInRequestValidationError{
			field:  "Request",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return Blog_SignInRequestMultiError(errors)
	}

	return nil
}

func (m *Blog_SignInRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *Blog_SignInRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// Blog_SignInRequestMultiError is an error wrapping multiple validation errors
// returned by Blog_SignInRequest.ValidateAll() if the designated constraints
// aren't met.
type Blog_SignInRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_SignInRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_SignInRequestMultiError) AllErrors() []error { return m }

// Blog_SignInRequestValidationError is the validation error returned by
// Blog_SignInRequest.Validate if the designated constraints aren't met.
type Blog_SignInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_SignInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_SignInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_SignInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_SignInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_SignInRequestValidationError) ErrorName() string {
	return "Blog_SignInRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_SignInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_SignInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_SignInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_SignInRequestValidationError{}

// Validate checks the field values on Blog_SignInResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_SignInResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_SignInResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_SignInResponseMultiError, or nil if none found.
func (m *Blog_SignInResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_SignInResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return Blog_SignInResponseMultiError(errors)
	}

	return nil
}

// Blog_SignInResponseMultiError is an error wrapping multiple validation
// errors returned by Blog_SignInResponse.ValidateAll() if the designated
// constraints aren't met.
type Blog_SignInResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_SignInResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_SignInResponseMultiError) AllErrors() []error { return m }

// Blog_SignInResponseValidationError is the validation error returned by
// Blog_SignInResponse.Validate if the designated constraints aren't met.
type Blog_SignInResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_SignInResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_SignInResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_SignInResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_SignInResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_SignInResponseValidationError) ErrorName() string {
	return "Blog_SignInResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_SignInResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_SignInResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_SignInResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_SignInResponseValidationError{}

// Validate checks the field values on Blog_CreatePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_CreatePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_CreatePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_CreatePostRequestMultiError, or nil if none found.
func (m *Blog_CreatePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_CreatePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Blog_CreatePostRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Blog_CreatePostRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Blog_CreatePostRequestValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Blog_CreatePostRequestMultiError(errors)
	}

	return nil
}

// Blog_CreatePostRequestMultiError is an error wrapping multiple validation
// errors returned by Blog_CreatePostRequest.ValidateAll() if the designated
// constraints aren't met.
type Blog_CreatePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_CreatePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_CreatePostRequestMultiError) AllErrors() []error { return m }

// Blog_CreatePostRequestValidationError is the validation error returned by
// Blog_CreatePostRequest.Validate if the designated constraints aren't met.
type Blog_CreatePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_CreatePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_CreatePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_CreatePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_CreatePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_CreatePostRequestValidationError) ErrorName() string {
	return "Blog_CreatePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_CreatePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_CreatePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_CreatePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_CreatePostRequestValidationError{}

// Validate checks the field values on Blog_CreatePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_CreatePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_CreatePostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_CreatePostResponseMultiError, or nil if none found.
func (m *Blog_CreatePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_CreatePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Blog_CreatePostResponseValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Blog_CreatePostResponseValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Blog_CreatePostResponseValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Blog_CreatePostResponseMultiError(errors)
	}

	return nil
}

// Blog_CreatePostResponseMultiError is an error wrapping multiple validation
// errors returned by Blog_CreatePostResponse.ValidateAll() if the designated
// constraints aren't met.
type Blog_CreatePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_CreatePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_CreatePostResponseMultiError) AllErrors() []error { return m }

// Blog_CreatePostResponseValidationError is the validation error returned by
// Blog_CreatePostResponse.Validate if the designated constraints aren't met.
type Blog_CreatePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_CreatePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_CreatePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_CreatePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_CreatePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_CreatePostResponseValidationError) ErrorName() string {
	return "Blog_CreatePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_CreatePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_CreatePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_CreatePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_CreatePostResponseValidationError{}

// Validate checks the field values on Blog_DeletePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_DeletePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_DeletePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_DeletePostRequestMultiError, or nil if none found.
func (m *Blog_DeletePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_DeletePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return Blog_DeletePostRequestMultiError(errors)
	}

	return nil
}

// Blog_DeletePostRequestMultiError is an error wrapping multiple validation
// errors returned by Blog_DeletePostRequest.ValidateAll() if the designated
// constraints aren't met.
type Blog_DeletePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_DeletePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_DeletePostRequestMultiError) AllErrors() []error { return m }

// Blog_DeletePostRequestValidationError is the validation error returned by
// Blog_DeletePostRequest.Validate if the designated constraints aren't met.
type Blog_DeletePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_DeletePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_DeletePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_DeletePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_DeletePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_DeletePostRequestValidationError) ErrorName() string {
	return "Blog_DeletePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_DeletePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_DeletePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_DeletePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_DeletePostRequestValidationError{}

// Validate checks the field values on Blog_DeletePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_DeletePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_DeletePostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_DeletePostResponseMultiError, or nil if none found.
func (m *Blog_DeletePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_DeletePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return Blog_DeletePostResponseMultiError(errors)
	}

	return nil
}

// Blog_DeletePostResponseMultiError is an error wrapping multiple validation
// errors returned by Blog_DeletePostResponse.ValidateAll() if the designated
// constraints aren't met.
type Blog_DeletePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_DeletePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_DeletePostResponseMultiError) AllErrors() []error { return m }

// Blog_DeletePostResponseValidationError is the validation error returned by
// Blog_DeletePostResponse.Validate if the designated constraints aren't met.
type Blog_DeletePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_DeletePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_DeletePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_DeletePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_DeletePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_DeletePostResponseValidationError) ErrorName() string {
	return "Blog_DeletePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_DeletePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_DeletePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_DeletePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_DeletePostResponseValidationError{}

// Validate checks the field values on Blog_CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_CreateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_CreateCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_CreateCommentRequestMultiError, or nil if none found.
func (m *Blog_CreateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_CreateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Blog_CreateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Blog_CreateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Blog_CreateCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Blog_CreateCommentRequestMultiError(errors)
	}

	return nil
}

// Blog_CreateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by Blog_CreateCommentRequest.ValidateAll() if the
// designated constraints aren't met.
type Blog_CreateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_CreateCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_CreateCommentRequestMultiError) AllErrors() []error { return m }

// Blog_CreateCommentRequestValidationError is the validation error returned by
// Blog_CreateCommentRequest.Validate if the designated constraints aren't met.
type Blog_CreateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_CreateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_CreateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_CreateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_CreateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_CreateCommentRequestValidationError) ErrorName() string {
	return "Blog_CreateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_CreateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_CreateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_CreateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_CreateCommentRequestValidationError{}

// Validate checks the field values on Blog_CreateCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_CreateCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_CreateCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_CreateCommentResponseMultiError, or nil if none found.
func (m *Blog_CreateCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_CreateCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Blog_CreateCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Blog_CreateCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Blog_CreateCommentResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Blog_CreateCommentResponseMultiError(errors)
	}

	return nil
}

// Blog_CreateCommentResponseMultiError is an error wrapping multiple
// validation errors returned by Blog_CreateCommentResponse.ValidateAll() if
// the designated constraints aren't met.
type Blog_CreateCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_CreateCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_CreateCommentResponseMultiError) AllErrors() []error { return m }

// Blog_CreateCommentResponseValidationError is the validation error returned
// by Blog_CreateCommentResponse.Validate if the designated constraints aren't met.
type Blog_CreateCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_CreateCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_CreateCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_CreateCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_CreateCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_CreateCommentResponseValidationError) ErrorName() string {
	return "Blog_CreateCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_CreateCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_CreateCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_CreateCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_CreateCommentResponseValidationError{}

// Validate checks the field values on Blog_UpdateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_UpdateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_UpdateCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_UpdateCommentRequestMultiError, or nil if none found.
func (m *Blog_UpdateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_UpdateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Blog_UpdateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Blog_UpdateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Blog_UpdateCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Blog_UpdateCommentRequestMultiError(errors)
	}

	return nil
}

// Blog_UpdateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by Blog_UpdateCommentRequest.ValidateAll() if the
// designated constraints aren't met.
type Blog_UpdateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_UpdateCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_UpdateCommentRequestMultiError) AllErrors() []error { return m }

// Blog_UpdateCommentRequestValidationError is the validation error returned by
// Blog_UpdateCommentRequest.Validate if the designated constraints aren't met.
type Blog_UpdateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_UpdateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_UpdateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_UpdateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_UpdateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_UpdateCommentRequestValidationError) ErrorName() string {
	return "Blog_UpdateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_UpdateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_UpdateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_UpdateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_UpdateCommentRequestValidationError{}

// Validate checks the field values on Blog_UpdateCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_UpdateCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_UpdateCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_UpdateCommentResponseMultiError, or nil if none found.
func (m *Blog_UpdateCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_UpdateCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return Blog_UpdateCommentResponseMultiError(errors)
	}

	return nil
}

// Blog_UpdateCommentResponseMultiError is an error wrapping multiple
// validation errors returned by Blog_UpdateCommentResponse.ValidateAll() if
// the designated constraints aren't met.
type Blog_UpdateCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_UpdateCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_UpdateCommentResponseMultiError) AllErrors() []error { return m }

// Blog_UpdateCommentResponseValidationError is the validation error returned
// by Blog_UpdateCommentResponse.Validate if the designated constraints aren't met.
type Blog_UpdateCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_UpdateCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_UpdateCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_UpdateCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_UpdateCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_UpdateCommentResponseValidationError) ErrorName() string {
	return "Blog_UpdateCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_UpdateCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_UpdateCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_UpdateCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_UpdateCommentResponseValidationError{}

// Validate checks the field values on Blog_DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_DeleteCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_DeleteCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_DeleteCommentRequestMultiError, or nil if none found.
func (m *Blog_DeleteCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_DeleteCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return Blog_DeleteCommentRequestMultiError(errors)
	}

	return nil
}

// Blog_DeleteCommentRequestMultiError is an error wrapping multiple validation
// errors returned by Blog_DeleteCommentRequest.ValidateAll() if the
// designated constraints aren't met.
type Blog_DeleteCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_DeleteCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_DeleteCommentRequestMultiError) AllErrors() []error { return m }

// Blog_DeleteCommentRequestValidationError is the validation error returned by
// Blog_DeleteCommentRequest.Validate if the designated constraints aren't met.
type Blog_DeleteCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_DeleteCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_DeleteCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_DeleteCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_DeleteCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_DeleteCommentRequestValidationError) ErrorName() string {
	return "Blog_DeleteCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_DeleteCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_DeleteCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_DeleteCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_DeleteCommentRequestValidationError{}

// Validate checks the field values on Blog_DeleteCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_DeleteCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_DeleteCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_DeleteCommentResponseMultiError, or nil if none found.
func (m *Blog_DeleteCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_DeleteCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return Blog_DeleteCommentResponseMultiError(errors)
	}

	return nil
}

// Blog_DeleteCommentResponseMultiError is an error wrapping multiple
// validation errors returned by Blog_DeleteCommentResponse.ValidateAll() if
// the designated constraints aren't met.
type Blog_DeleteCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_DeleteCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_DeleteCommentResponseMultiError) AllErrors() []error { return m }

// Blog_DeleteCommentResponseValidationError is the validation error returned
// by Blog_DeleteCommentResponse.Validate if the designated constraints aren't met.
type Blog_DeleteCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_DeleteCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_DeleteCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_DeleteCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_DeleteCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_DeleteCommentResponseValidationError) ErrorName() string {
	return "Blog_DeleteCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_DeleteCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_DeleteCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_DeleteCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_DeleteCommentResponseValidationError{}

// Validate checks the field values on Blog_GetPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_GetPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_GetPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_GetPostRequestMultiError, or nil if none found.
func (m *Blog_GetPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_GetPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return Blog_GetPostRequestMultiError(errors)
	}

	return nil
}

// Blog_GetPostRequestMultiError is an error wrapping multiple validation
// errors returned by Blog_GetPostRequest.ValidateAll() if the designated
// constraints aren't met.
type Blog_GetPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_GetPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_GetPostRequestMultiError) AllErrors() []error { return m }

// Blog_GetPostRequestValidationError is the validation error returned by
// Blog_GetPostRequest.Validate if the designated constraints aren't met.
type Blog_GetPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_GetPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_GetPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_GetPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_GetPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_GetPostRequestValidationError) ErrorName() string {
	return "Blog_GetPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_GetPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_GetPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_GetPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_GetPostRequestValidationError{}

// Validate checks the field values on Blog_GetPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_GetPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_GetPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_GetPostResponseMultiError, or nil if none found.
func (m *Blog_GetPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_GetPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Blog_GetPostResponseValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Blog_GetPostResponseValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Blog_GetPostResponseValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Blog_GetPostResponseMultiError(errors)
	}

	return nil
}

// Blog_GetPostResponseMultiError is an error wrapping multiple validation
// errors returned by Blog_GetPostResponse.ValidateAll() if the designated
// constraints aren't met.
type Blog_GetPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_GetPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_GetPostResponseMultiError) AllErrors() []error { return m }

// Blog_GetPostResponseValidationError is the validation error returned by
// Blog_GetPostResponse.Validate if the designated constraints aren't met.
type Blog_GetPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_GetPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_GetPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_GetPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_GetPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_GetPostResponseValidationError) ErrorName() string {
	return "Blog_GetPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_GetPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_GetPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_GetPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_GetPostResponseValidationError{}

// Validate checks the field values on Blog_UpdatePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_UpdatePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_UpdatePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_UpdatePostRequestMultiError, or nil if none found.
func (m *Blog_UpdatePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_UpdatePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Blog_UpdatePostRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Blog_UpdatePostRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Blog_UpdatePostRequestValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Blog_UpdatePostRequestMultiError(errors)
	}

	return nil
}

// Blog_UpdatePostRequestMultiError is an error wrapping multiple validation
// errors returned by Blog_UpdatePostRequest.ValidateAll() if the designated
// constraints aren't met.
type Blog_UpdatePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_UpdatePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_UpdatePostRequestMultiError) AllErrors() []error { return m }

// Blog_UpdatePostRequestValidationError is the validation error returned by
// Blog_UpdatePostRequest.Validate if the designated constraints aren't met.
type Blog_UpdatePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_UpdatePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_UpdatePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_UpdatePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_UpdatePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_UpdatePostRequestValidationError) ErrorName() string {
	return "Blog_UpdatePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_UpdatePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_UpdatePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_UpdatePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_UpdatePostRequestValidationError{}

// Validate checks the field values on Blog_UpdatePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_UpdatePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_UpdatePostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_UpdatePostResponseMultiError, or nil if none found.
func (m *Blog_UpdatePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_UpdatePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return Blog_UpdatePostResponseMultiError(errors)
	}

	return nil
}

// Blog_UpdatePostResponseMultiError is an error wrapping multiple validation
// errors returned by Blog_UpdatePostResponse.ValidateAll() if the designated
// constraints aren't met.
type Blog_UpdatePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_UpdatePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_UpdatePostResponseMultiError) AllErrors() []error { return m }

// Blog_UpdatePostResponseValidationError is the validation error returned by
// Blog_UpdatePostResponse.Validate if the designated constraints aren't met.
type Blog_UpdatePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_UpdatePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_UpdatePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_UpdatePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_UpdatePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_UpdatePostResponseValidationError) ErrorName() string {
	return "Blog_UpdatePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_UpdatePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_UpdatePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_UpdatePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_UpdatePostResponseValidationError{}

// Validate checks the field values on Blog_ListPostsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_ListPostsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_ListPostsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_ListPostsRequestMultiError, or nil if none found.
func (m *Blog_ListPostsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_ListPostsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return Blog_ListPostsRequestMultiError(errors)
	}

	return nil
}

// Blog_ListPostsRequestMultiError is an error wrapping multiple validation
// errors returned by Blog_ListPostsRequest.ValidateAll() if the designated
// constraints aren't met.
type Blog_ListPostsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_ListPostsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_ListPostsRequestMultiError) AllErrors() []error { return m }

// Blog_ListPostsRequestValidationError is the validation error returned by
// Blog_ListPostsRequest.Validate if the designated constraints aren't met.
type Blog_ListPostsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_ListPostsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_ListPostsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_ListPostsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_ListPostsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_ListPostsRequestValidationError) ErrorName() string {
	return "Blog_ListPostsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_ListPostsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_ListPostsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_ListPostsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_ListPostsRequestValidationError{}

// Validate checks the field values on Blog_ListPostsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Blog_ListPostsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_ListPostsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Blog_ListPostsResponseMultiError, or nil if none found.
func (m *Blog_ListPostsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_ListPostsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Blog_ListPostsResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Blog_ListPostsResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Blog_ListPostsResponseValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return Blog_ListPostsResponseMultiError(errors)
	}

	return nil
}

// Blog_ListPostsResponseMultiError is an error wrapping multiple validation
// errors returned by Blog_ListPostsResponse.ValidateAll() if the designated
// constraints aren't met.
type Blog_ListPostsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_ListPostsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_ListPostsResponseMultiError) AllErrors() []error { return m }

// Blog_ListPostsResponseValidationError is the validation error returned by
// Blog_ListPostsResponse.Validate if the designated constraints aren't met.
type Blog_ListPostsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_ListPostsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_ListPostsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_ListPostsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_ListPostsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_ListPostsResponseValidationError) ErrorName() string {
	return "Blog_ListPostsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_ListPostsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_ListPostsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_ListPostsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_ListPostsResponseValidationError{}

// Validate checks the field values on Blog_ListCommentsByPostIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *Blog_ListCommentsByPostIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_ListCommentsByPostIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Blog_ListCommentsByPostIDRequestMultiError, or nil if none found.
func (m *Blog_ListCommentsByPostIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_ListCommentsByPostIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PostId

	// no validation rules for Offset

	// no validation rules for Total

	if len(errors) > 0 {
		return Blog_ListCommentsByPostIDRequestMultiError(errors)
	}

	return nil
}

// Blog_ListCommentsByPostIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// Blog_ListCommentsByPostIDRequest.ValidateAll() if the designated
// constraints aren't met.
type Blog_ListCommentsByPostIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_ListCommentsByPostIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_ListCommentsByPostIDRequestMultiError) AllErrors() []error { return m }

// Blog_ListCommentsByPostIDRequestValidationError is the validation error
// returned by Blog_ListCommentsByPostIDRequest.Validate if the designated
// constraints aren't met.
type Blog_ListCommentsByPostIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_ListCommentsByPostIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_ListCommentsByPostIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_ListCommentsByPostIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_ListCommentsByPostIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_ListCommentsByPostIDRequestValidationError) ErrorName() string {
	return "Blog_ListCommentsByPostIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_ListCommentsByPostIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_ListCommentsByPostIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_ListCommentsByPostIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_ListCommentsByPostIDRequestValidationError{}

// Validate checks the field values on Blog_ListCommentsByPostIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *Blog_ListCommentsByPostIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog_ListCommentsByPostIDResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// Blog_ListCommentsByPostIDResponseMultiError, or nil if none found.
func (m *Blog_ListCommentsByPostIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog_ListCommentsByPostIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Blog_ListCommentsByPostIDResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Blog_ListCommentsByPostIDResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Blog_ListCommentsByPostIDResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return Blog_ListCommentsByPostIDResponseMultiError(errors)
	}

	return nil
}

// Blog_ListCommentsByPostIDResponseMultiError is an error wrapping multiple
// validation errors returned by
// Blog_ListCommentsByPostIDResponse.ValidateAll() if the designated
// constraints aren't met.
type Blog_ListCommentsByPostIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Blog_ListCommentsByPostIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Blog_ListCommentsByPostIDResponseMultiError) AllErrors() []error { return m }

// Blog_ListCommentsByPostIDResponseValidationError is the validation error
// returned by Blog_ListCommentsByPostIDResponse.Validate if the designated
// constraints aren't met.
type Blog_ListCommentsByPostIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Blog_ListCommentsByPostIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Blog_ListCommentsByPostIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Blog_ListCommentsByPostIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Blog_ListCommentsByPostIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Blog_ListCommentsByPostIDResponseValidationError) ErrorName() string {
	return "Blog_ListCommentsByPostIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Blog_ListCommentsByPostIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog_ListCommentsByPostIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Blog_ListCommentsByPostIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Blog_ListCommentsByPostIDResponseValidationError{}
