// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: blog.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlogServiceClient is the client API for BlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogServiceClient interface {
	SignUp(ctx context.Context, in *Blog_SignUpRequest, opts ...grpc.CallOption) (*Blog_SignUpResponse, error)
	SignIn(ctx context.Context, in *Blog_SignInRequest, opts ...grpc.CallOption) (*Blog_SignInResponse, error)
	CreatePost(ctx context.Context, in *Blog_CreatePostRequest, opts ...grpc.CallOption) (*Blog_CreatePostResponse, error)
	GetPost(ctx context.Context, in *Blog_GetPostRequest, opts ...grpc.CallOption) (*Blog_GetPostResponse, error)
	ListPosts(ctx context.Context, in *Blog_ListPostsRequest, opts ...grpc.CallOption) (*Blog_ListPostsResponse, error)
	UpdatePost(ctx context.Context, in *Blog_UpdatePostRequest, opts ...grpc.CallOption) (*Blog_UpdatePostResponse, error)
	DeletePost(ctx context.Context, in *Blog_DeletePostRequest, opts ...grpc.CallOption) (*Blog_DeletePostResponse, error)
	CreateComment(ctx context.Context, in *Blog_CreateCommentRequest, opts ...grpc.CallOption) (*Blog_CreateCommentResponse, error)
	DeleteComment(ctx context.Context, in *Blog_DeleteCommentRequest, opts ...grpc.CallOption) (*Blog_DeleteCommentResponse, error)
	UpdateComment(ctx context.Context, in *Blog_UpdateCommentRequest, opts ...grpc.CallOption) (*Blog_UpdateCommentResponse, error)
	ListCommentsByPostID(ctx context.Context, in *Blog_ListCommentsByPostIDRequest, opts ...grpc.CallOption) (*Blog_ListCommentsByPostIDResponse, error)
}

type blogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogServiceClient(cc grpc.ClientConnInterface) BlogServiceClient {
	return &blogServiceClient{cc}
}

func (c *blogServiceClient) SignUp(ctx context.Context, in *Blog_SignUpRequest, opts ...grpc.CallOption) (*Blog_SignUpResponse, error) {
	out := new(Blog_SignUpResponse)
	err := c.cc.Invoke(ctx, "/BlogService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) SignIn(ctx context.Context, in *Blog_SignInRequest, opts ...grpc.CallOption) (*Blog_SignInResponse, error) {
	out := new(Blog_SignInResponse)
	err := c.cc.Invoke(ctx, "/BlogService/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) CreatePost(ctx context.Context, in *Blog_CreatePostRequest, opts ...grpc.CallOption) (*Blog_CreatePostResponse, error) {
	out := new(Blog_CreatePostResponse)
	err := c.cc.Invoke(ctx, "/BlogService/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetPost(ctx context.Context, in *Blog_GetPostRequest, opts ...grpc.CallOption) (*Blog_GetPostResponse, error) {
	out := new(Blog_GetPostResponse)
	err := c.cc.Invoke(ctx, "/BlogService/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) ListPosts(ctx context.Context, in *Blog_ListPostsRequest, opts ...grpc.CallOption) (*Blog_ListPostsResponse, error) {
	out := new(Blog_ListPostsResponse)
	err := c.cc.Invoke(ctx, "/BlogService/ListPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) UpdatePost(ctx context.Context, in *Blog_UpdatePostRequest, opts ...grpc.CallOption) (*Blog_UpdatePostResponse, error) {
	out := new(Blog_UpdatePostResponse)
	err := c.cc.Invoke(ctx, "/BlogService/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) DeletePost(ctx context.Context, in *Blog_DeletePostRequest, opts ...grpc.CallOption) (*Blog_DeletePostResponse, error) {
	out := new(Blog_DeletePostResponse)
	err := c.cc.Invoke(ctx, "/BlogService/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) CreateComment(ctx context.Context, in *Blog_CreateCommentRequest, opts ...grpc.CallOption) (*Blog_CreateCommentResponse, error) {
	out := new(Blog_CreateCommentResponse)
	err := c.cc.Invoke(ctx, "/BlogService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) DeleteComment(ctx context.Context, in *Blog_DeleteCommentRequest, opts ...grpc.CallOption) (*Blog_DeleteCommentResponse, error) {
	out := new(Blog_DeleteCommentResponse)
	err := c.cc.Invoke(ctx, "/BlogService/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) UpdateComment(ctx context.Context, in *Blog_UpdateCommentRequest, opts ...grpc.CallOption) (*Blog_UpdateCommentResponse, error) {
	out := new(Blog_UpdateCommentResponse)
	err := c.cc.Invoke(ctx, "/BlogService/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) ListCommentsByPostID(ctx context.Context, in *Blog_ListCommentsByPostIDRequest, opts ...grpc.CallOption) (*Blog_ListCommentsByPostIDResponse, error) {
	out := new(Blog_ListCommentsByPostIDResponse)
	err := c.cc.Invoke(ctx, "/BlogService/ListCommentsByPostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogServiceServer is the server API for BlogService service.
// All implementations must embed UnimplementedBlogServiceServer
// for forward compatibility
type BlogServiceServer interface {
	SignUp(context.Context, *Blog_SignUpRequest) (*Blog_SignUpResponse, error)
	SignIn(context.Context, *Blog_SignInRequest) (*Blog_SignInResponse, error)
	CreatePost(context.Context, *Blog_CreatePostRequest) (*Blog_CreatePostResponse, error)
	GetPost(context.Context, *Blog_GetPostRequest) (*Blog_GetPostResponse, error)
	ListPosts(context.Context, *Blog_ListPostsRequest) (*Blog_ListPostsResponse, error)
	UpdatePost(context.Context, *Blog_UpdatePostRequest) (*Blog_UpdatePostResponse, error)
	DeletePost(context.Context, *Blog_DeletePostRequest) (*Blog_DeletePostResponse, error)
	CreateComment(context.Context, *Blog_CreateCommentRequest) (*Blog_CreateCommentResponse, error)
	DeleteComment(context.Context, *Blog_DeleteCommentRequest) (*Blog_DeleteCommentResponse, error)
	UpdateComment(context.Context, *Blog_UpdateCommentRequest) (*Blog_UpdateCommentResponse, error)
	ListCommentsByPostID(context.Context, *Blog_ListCommentsByPostIDRequest) (*Blog_ListCommentsByPostIDResponse, error)
	mustEmbedUnimplementedBlogServiceServer()
}

// UnimplementedBlogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlogServiceServer struct {
}

func (UnimplementedBlogServiceServer) SignUp(context.Context, *Blog_SignUpRequest) (*Blog_SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedBlogServiceServer) SignIn(context.Context, *Blog_SignInRequest) (*Blog_SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedBlogServiceServer) CreatePost(context.Context, *Blog_CreatePostRequest) (*Blog_CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedBlogServiceServer) GetPost(context.Context, *Blog_GetPostRequest) (*Blog_GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedBlogServiceServer) ListPosts(context.Context, *Blog_ListPostsRequest) (*Blog_ListPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPosts not implemented")
}
func (UnimplementedBlogServiceServer) UpdatePost(context.Context, *Blog_UpdatePostRequest) (*Blog_UpdatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedBlogServiceServer) DeletePost(context.Context, *Blog_DeletePostRequest) (*Blog_DeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedBlogServiceServer) CreateComment(context.Context, *Blog_CreateCommentRequest) (*Blog_CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedBlogServiceServer) DeleteComment(context.Context, *Blog_DeleteCommentRequest) (*Blog_DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedBlogServiceServer) UpdateComment(context.Context, *Blog_UpdateCommentRequest) (*Blog_UpdateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedBlogServiceServer) ListCommentsByPostID(context.Context, *Blog_ListCommentsByPostIDRequest) (*Blog_ListCommentsByPostIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentsByPostID not implemented")
}
func (UnimplementedBlogServiceServer) mustEmbedUnimplementedBlogServiceServer() {}

// UnsafeBlogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogServiceServer will
// result in compilation errors.
type UnsafeBlogServiceServer interface {
	mustEmbedUnimplementedBlogServiceServer()
}

func RegisterBlogServiceServer(s grpc.ServiceRegistrar, srv BlogServiceServer) {
	s.RegisterService(&BlogService_ServiceDesc, srv)
}

func _BlogService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlogService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).SignUp(ctx, req.(*Blog_SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlogService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).SignIn(ctx, req.(*Blog_SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlogService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).CreatePost(ctx, req.(*Blog_CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlogService/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetPost(ctx, req.(*Blog_GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_ListPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_ListPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).ListPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlogService/ListPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).ListPosts(ctx, req.(*Blog_ListPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlogService/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).UpdatePost(ctx, req.(*Blog_UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlogService/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).DeletePost(ctx, req.(*Blog_DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlogService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).CreateComment(ctx, req.(*Blog_CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlogService/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).DeleteComment(ctx, req.(*Blog_DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlogService/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).UpdateComment(ctx, req.(*Blog_UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_ListCommentsByPostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blog_ListCommentsByPostIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).ListCommentsByPostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlogService/ListCommentsByPostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).ListCommentsByPostID(ctx, req.(*Blog_ListCommentsByPostIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogService_ServiceDesc is the grpc.ServiceDesc for BlogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BlogService",
	HandlerType: (*BlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _BlogService_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _BlogService_SignIn_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _BlogService_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _BlogService_GetPost_Handler,
		},
		{
			MethodName: "ListPosts",
			Handler:    _BlogService_ListPosts_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _BlogService_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _BlogService_DeletePost_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _BlogService_CreateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _BlogService_DeleteComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _BlogService_UpdateComment_Handler,
		},
		{
			MethodName: "ListCommentsByPostID",
			Handler:    _BlogService_ListCommentsByPostID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}
